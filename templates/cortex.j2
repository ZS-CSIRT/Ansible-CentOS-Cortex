## SECRET KEY
#
# The secret key is used to secure cryptographic functions.
#
# IMPORTANT: If you deploy your application to several  instances,  make
# sure to use the same key.
play.http.secret.key = '{{ cortex_http_secret }}'
play.http.session.secure = {{ SSL }}

## ElasticSearch
search {
  # Name of the index
  index = {{ ELK_INDEX }}
  # ElasticSearch instance address.
  # For cluster, join address:port with ',': "http://ip1:9200,ip2:9200,ip3:9200"
  uri = "{{ ELK_URI }}"

  ## Advanced configuration
  # Scroll keepalive.
  keepalive = {{ ELK_KEEPALIVE }}
  # Scroll page size.
  pagesize = {{ ELK_PAGESIZE }}
  # Number of shards
  nbshards = {{ ELK_SHARDS }}
  # Number of replicas
  nbreplicas = {{ ELK_REPLICAS }}
  # Arbitrary settings
  settings {
  #  # Maximum number of nested fields
    mapping.nested_fields.limit = {{ ELK_NESTED_FIELDS_LIMIT }}
  }

  {% if ELK_USERNAME != "" and elk_pw != "" %}
      ## Authentication configuration
      search.username = "{{ ELK_USERNAME }}"
      search.password = "{{ elk_pw }}"
  {% endif %}

  {% if ELK_SSL == "true" %}
    ## SSL configuration
    search.keyStore {
      path = "{{ ELK_KEYSTORE }}"
      type = "{{ ELK_KEYSTORE_TYPE }}"
      password = "{{ elk_keystore_pw }}"
    }
  {% endif %}
}

## Cache
#
# If an analyzer is executed against the same observable, the previous report can be returned without re-executing the
# analyzer. The cache is used only if the second job occurs within cache.job (the default is 10 minutes).
cache.job = 10 minutes

## Authentication
auth {
	# "provider" parameter contains the authentication provider(s). It can be multi-valued, which is useful
	# for migration.
	# The available auth types are:
	# - services.LocalAuthSrv : passwords are stored in the user entity within ElasticSearch). No
	#   configuration are required.
	# - ad : use ActiveDirectory to authenticate users. The associated configuration shall be done in
	#   the "ad" section below.
	# - ldap : use LDAP to authenticate users. The associated configuration shall be done in the
	#   "ldap" section below.
	provider = {{ AUTH_PROVIDER }}

	ad {
                {% if "ad" in AUTH_PROVIDER %}
			# The Windows domain name in DNS format. This parameter is required if you do not use
			# 'serverNames' below.
			{% if AD_SERVER_NAMES == "" %}
				domainFQDN = "{{ AD_DOMAIN_FQDN }}"
			{% else %}
				serverNames = {{ AD_SERVER_NAMES }}
			{% endif %}

			# The Windows domain name using short format. This parameter is required.
			domainName = "{{ AD_DOMAIN_NAME}}"

			# If 'true', use SSL to connect to the domain controller.
			useSSL = "{{ AD_SSL }}"
		{% endif %}
	}

	ldap {
		{% if "ldap" in AUTH_PROVIDER %}
			serverNames = ["{{ LDAP_SERVER_NAMES }}"]

			# Account to use to bind to the LDAP server. This parameter is required.
			bindDN = "{{ LDAP_BIND_DN }}"

			# Password of the binding account. This parameter is required.
			bindPW = "{{ ldap_bind_pw }}"

			# Base DN to search users. This parameter is required.
			baseDN = "{{ LDAP_BASE_DN }}"

			# Filter to search user in the directory server. Please note that {0} is replaced
			# by the actual user name. This parameter is required.
			filter = "{{ LDAP_FILTER }}"

			# If 'true', use SSL to connect to the LDAP directory server.
			useSSL = "{{ LDAP_SSL }}"
		{% endif %}
	}
}

## ANALYZERS
#
analyzer {
  # analyzer location
  # url can be point to:
  # - directory where analyzers are installed
  # - json file containing the list of analyzer descriptions
  urls = [
    {% if CORTEX_A_DIRECTORY == "" %}
	    "https://dl.bintray.com/thehive-project/cortexneurons/analyzers.json"
    {% else %}
	    "{{ CORTEX_A_DIRECTORY }}"
    {% endif %}
  ]

  # Sane defaults. Do not change unless you know what you are doing.
  fork-join-executor {
    # Min number of threads available for analysis.
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor).
    parallelism-factor = 2.0
    # Max number of threads available for analysis.
    parallelism-max = 4
  }
}

# RESPONDERS
#
responder {
  # responder location (same format as analyzer.urls)
  urls = [
    {% if CORTEX_R_DIRECTORY == "" %}
	    "https://dl.bintray.com/thehive-project/cortexneurons/reponders.json"
    {% else %}
	    "{{ CORTEX_R_DIRECTORY }}"
    {% endif %}
  ]

  # Sane defaults. Do not change unless you know what you are doing.
  fork-join-executor {
    # Min number of threads available for analysis.
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor).
    parallelism-factor = 2.0
    # Max number of threads available for analysis.
    parallelism-max = 4
  }
}

{% if CORTEX_USE_ADVANCED_SETTINGS == "true" %}
	# Streaming settings
	stream.longpolling {
		refresh = {{ CORTEX_LONGPOL_REFRESH }}
		cache = {{ CORTEX_LONGPOL_CACHE }}
		nextItemMaxWait = {{ CORTEX_LONGPOL_NEXT_ITEM_WAIT }}
		globalMaxWait = {{ CORTEX_LONGPOL_GLOBAL_MAX_WAIT }}
	}

	# Caching
	cache {
		job = {{ CORTEX_CACHE_JOB }}
		user = {{ CORTEX_CACHE_USER }}
		organization = {{ CORTEX_CACHE_ORG }}
	}

	# Tweaking Cortex settings
	play.http.parser.maxMemoryBuffer = {{ CORTEX_MAX_MEM_BUFFER }}
	play.http.parser.maxDiskBuffer = {{ CORTEX_MAX_DISK_BUFFER }}
{% endif %}

# It's the end my friend. Happy hunting!
